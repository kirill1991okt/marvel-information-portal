{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/pages/singleComicPage/SingleComicPage.js"],"names":["ErrorMessage","src","img","style","display","width","height","objectFit","margin","alt","useMarvelServices","useState","loading","setLoading","error","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","a","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComic","getCharacterByName","name","_transformCharacterByName","char","description","thumbnail","path","extension","comics","title","pageCount","language","textObjects","price","prices","slice","homepage","urls","wiki","items","View","comic","className","to","SingleComicPage","comicId","useParams","setComic","useEffect","onUpdateComic","onComicLoaded","then","errorMessage","spinner","content"],"mappings":"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","file":"static/js/7.dce15ded.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      src={img}\r\n      style={{\r\n        display: 'block',\r\n        width: '250px',\r\n        height: '250px',\r\n        objectFit: 'cover',\r\n        margin: '0 auto',\r\n      }}\r\n      alt=\"Error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelServices = () => {\r\n  const { loading, error, request, clearError } = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=d5d684a06d58da256b5a00a75e3c5ddf';\r\n  const _offset = '210';\r\n\r\n  const getAllCharacters = async (offset = _offset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${_apiBase}/comics?limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\r\n    return _transformCharacterByName(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacterByName = (char) => {\r\n    if (char) {\r\n      return {\r\n        name: char.name,\r\n        description: char.description || 'No description',\r\n        thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      };\r\n    } else {\r\n      return {\r\n        error: 'The character was not found.',\r\n      };\r\n    }\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      name: comics.title,\r\n      description: comics.description || 'No description',\r\n      pageCount: comics.pageCount || 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices[0].price,\r\n    };\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? char.description.slice(0, 210) + '...'\r\n        : 'Sorry, no character data',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n    getCharacterByName,\r\n    clearError,\r\n  };\r\n};\r\n\r\nexport default useMarvelServices;\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = 'GET',\r\n      body = null,\r\n      headers = { 'Content-Type': 'application/json' }\r\n    ) => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n\r\n  return { loading, error, request, clearError };\r\n};\r\n","import { Link, useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport useMarvelServices from '../../../services/MarvelService';\r\nimport ErrorMessage from '../../errorMessage/ErrorMessage';\r\nimport Spinner from '../../spinner/Spinner';\r\n\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n  const { comicId } = useParams();\r\n\r\n  const [comic, setComic] = useState(null);\r\n\r\n  const { loading, error, getComic, clearError } = useMarvelServices();\r\n\r\n  useEffect(() => {\r\n    onUpdateComic();\r\n  }, [comicId]);\r\n\r\n  const onComicLoaded = (comic) => {\r\n    setComic(comic);\r\n  };\r\n\r\n  const onUpdateComic = () => {\r\n    clearError();\r\n    getComic(comicId).then(onComicLoaded);\r\n  };\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(!comic || loading || error) ? <View comic={comic} /> : null;\r\n\r\n  return (\r\n    <>\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </>\r\n  );\r\n};\r\n\r\nconst View = ({ comic }) => {\r\n  const { name, thumbnail, description, pageCount, language, price } = comic;\r\n\r\n  return (\r\n    <div className=\"single-comic\">\r\n      <img src={thumbnail} alt={name} className=\"single-comic__img\" />\r\n      <div className=\"single-comic__info\">\r\n        <h2 className=\"single-comic__name\">{name}</h2>\r\n        <p className=\"single-comic__descr\">{description}</p>\r\n        <p className=\"single-comic__descr\">{pageCount} pages</p>\r\n        <p className=\"single-comic__descr\">{language}</p>\r\n        <div className=\"single-comic__price\">{price} $</div>\r\n      </div>\r\n      <Link to={'/comics'} className=\"single-comic__back\">\r\n        Back to all\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleComicPage;\r\n"],"sourceRoot":""}