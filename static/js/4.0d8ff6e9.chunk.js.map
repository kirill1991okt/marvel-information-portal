{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/formChar/FormChar.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","src","img","style","display","width","height","objectFit","margin","alt","useMarvelServices","useState","loading","setLoading","error","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","a","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComic","getCharacterByName","name","_transformCharacterByName","char","description","thumbnail","path","extension","comics","title","pageCount","language","textObjects","price","prices","slice","homepage","urls","wiki","items","View","obj","incorrectImage","className","href","RandomChar","setChar","useEffect","getChar","idChar","Math","floor","random","then","onCharLoaded","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","dataChar","setDataChar","newItemLoading","setNewItemLoading","setOffset","itemLoaded","setItemLoaded","itemRefs","useRef","onRequest","initial","onAllCharLoaded","newDataChar","loaded","length","addClass","i","current","forEach","item","classList","remove","add","focus","listItem","arrList","elements","CSSTransition","timeout","classNames","ref","el","tabIndex","updateIdChar","onKeyDown","e","key","TransitionGroup","component","charItems","disabled","Skeleton","comicsCutArr","split","includes","splitStr","resourceURI","to","CharInfo","updateChar","selectedChar","skeleton","toLowerCase","FormChar","initialValues","validate","values","errors","onSubmit","setSubmitting","isSubmitting","type","placeholder","ErrorBoundary","componentDidCatch","errorInfo","console","log","componentStack","setState","state","this","children","React","Component","MainPage","setSelectedChar","decoration"],"mappings":"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","file":"static/js/4.0d8ff6e9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      src={img}\r\n      style={{\r\n        display: 'block',\r\n        width: '250px',\r\n        height: '250px',\r\n        objectFit: 'cover',\r\n        margin: '0 auto',\r\n      }}\r\n      alt=\"Error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelServices = () => {\r\n  const { loading, error, request, clearError } = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=d5d684a06d58da256b5a00a75e3c5ddf';\r\n  const _offset = '210';\r\n\r\n  const getAllCharacters = async (offset = _offset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${_apiBase}/comics?limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\r\n    return _transformCharacterByName(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacterByName = (char) => {\r\n    if (char) {\r\n      return {\r\n        name: char.name,\r\n        description: char.description || 'No description',\r\n        thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      };\r\n    } else {\r\n      return {\r\n        error: 'The character was not found.',\r\n      };\r\n    }\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      name: comics.title,\r\n      description: comics.description || 'No description',\r\n      pageCount: comics.pageCount || 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices[0].price,\r\n    };\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? char.description.slice(0, 210) + '...'\r\n        : 'Sorry, no character data',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n    getCharacterByName,\r\n    clearError,\r\n  };\r\n};\r\n\r\nexport default useMarvelServices;\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = 'GET',\r\n      body = null,\r\n      headers = { 'Content-Type': 'application/json' }\r\n    ) => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n\r\n  return { loading, error, request, clearError };\r\n};\r\n","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\r\nimport useMarvelServices from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner';\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n  const [char, setChar] = useState({});\r\n  const { loading, error, getCharacter, clearError } = useMarvelServices();\r\n\r\n  useEffect(() => {\r\n    getChar();\r\n  }, []);\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const getChar = () => {\r\n    clearError();\r\n    const idChar = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n    getCharacter(idChar).then((data) => {\r\n      onCharLoaded(data);\r\n    });\r\n  };\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(loading || error) ? <View char={char} /> : null;\r\n  return (\r\n    <div className=\"randomchar\">\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n      <div className=\"randomchar__static\">\r\n        <p className=\"randomchar__title\">\r\n          Random character for today!\r\n          <br />\r\n          Do you want to get to know him better?\r\n        </p>\r\n        <p className=\"randomchar__title\">Or choose another one</p>\r\n        <button className=\"button button__main\" onClick={getChar}>\r\n          <div className=\"inner\">try it</div>\r\n        </button>\r\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst View = (obj) => {\r\n  const { name, description, thumbnail, homepage, wiki } = obj.char;\r\n  let incorrectImage = { objectFit: 'cover' };\r\n  if (\r\n    thumbnail ===\r\n    'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\r\n  ) {\r\n    incorrectImage = { objectFit: 'contain' };\r\n  }\r\n  return (\r\n    <div className=\"randomchar__block\">\r\n      <img\r\n        src={thumbnail}\r\n        alt=\"Random character\"\r\n        className={'randomchar__img'}\r\n        style={incorrectImage}\r\n      />\r\n      <div className=\"randomchar__info\">\r\n        <p className=\"randomchar__name\">{name}</p>\r\n        <p className=\"randomchar__descr\">{description}</p>\r\n        <div className=\"randomchar__btns\">\r\n          <a href={homepage} className=\"button button__main\">\r\n            <div className=\"inner\">homepage</div>\r\n          </a>\r\n          <a href={wiki} className=\"button button__secondary\">\r\n            <div className=\"inner\">Wiki</div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RandomChar;\r\n","import { useState, useEffect, useRef } from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport useMarvelServices from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner';\r\n\r\nimport './charList.scss';\r\n\r\nfunction CharList(props) {\r\n  const [dataChar, setDataChar] = useState([]);\r\n  const [newItemLoading, setNewItemLoading] = useState(false);\r\n  const [offset, setOffset] = useState(210);\r\n  const [itemLoaded, setItemLoaded] = useState(false);\r\n  const itemRefs = useRef([]);\r\n\r\n  const { loading, error, getAllCharacters } = useMarvelServices();\r\n\r\n  useEffect(() => {\r\n    onRequest(offset, true);\r\n  }, []);\r\n\r\n  const onRequest = (offset, initial) => {\r\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n    getAllCharacters(offset).then(onAllCharLoaded);\r\n  };\r\n\r\n  const onAllCharLoaded = (newDataChar) => {\r\n    let loaded = false;\r\n    if (newDataChar.length < 9) {\r\n      loaded = true;\r\n    }\r\n    setDataChar((dataChar) => [...dataChar, ...newDataChar]);\r\n    setOffset((offset) => offset + 9);\r\n    setNewItemLoading(false);\r\n    setItemLoaded(loaded);\r\n  };\r\n\r\n  const addClass = (i) => {\r\n    itemRefs.current.forEach((item) => {\r\n      item.classList.remove('char__item_selected');\r\n    });\r\n    itemRefs.current[i].classList.add('char__item_selected');\r\n    itemRefs.current[i].focus();\r\n  };\r\n\r\n  const charItems = (arrList) => {\r\n    const elements = arrList.map(({ thumbnail, name, id }, i) => {\r\n      return (\r\n        <CSSTransition timeout={400} classNames=\"char__item\" key={id}>\r\n          <li\r\n            ref={(el) => (itemRefs.current[i] = el)}\r\n            tabIndex={0}\r\n            className=\"char__item\"\r\n            // key={id}\r\n            onClick={() => {\r\n              addClass(i);\r\n              props.updateIdChar(id);\r\n            }}\r\n            onKeyDown={(e) => {\r\n              if (e.key === ' ' || e.key === 'Enter') {\r\n                addClass(i);\r\n                props.updateIdChar(id);\r\n              }\r\n            }}\r\n          >\r\n            <img src={thumbnail} alt=\"abyss\" />\r\n            <div className=\"char__name\">{name}</div>\r\n          </li>\r\n        </CSSTransition>\r\n      );\r\n    });\r\n    return (\r\n      <ul className=\"char__grid\">\r\n        <TransitionGroup component={null}>{elements}</TransitionGroup>\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  const listItem = charItems(dataChar);\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n  return (\r\n    <div className=\"char__list\">\r\n      {errorMessage}\r\n      {spinner}\r\n      {listItem}\r\n      <button\r\n        className=\"button button__main button__long\"\r\n        disabled={newItemLoading}\r\n        onClick={() => onRequest(offset)}\r\n        style={{ display: itemLoaded ? 'none' : 'block' }}\r\n      >\r\n        <div className=\"inner\">load more</div>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nCharList.propTypes = {\r\n  updateIdChar: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CharList;\r\n","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport useMarvelServices from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner';\r\nimport Skeleton from '../skeleton/Skeleton';\r\n\r\nimport './charInfo.scss';\r\n\r\nfunction CharInfo(props) {\r\n  const [char, setChar] = useState(null);\r\n\r\n  const { loading, error, getCharacter, clearError } = useMarvelServices();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n  }, [props.selectedChar]);\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = () => {\r\n    if (!props.selectedChar) {\r\n      return;\r\n    }\r\n    clearError();\r\n    getCharacter(props.selectedChar).then(onCharLoaded);\r\n  };\r\n\r\n  const skeleton = char || loading || error ? null : <Skeleton />;\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(!char || loading || error) ? <View char={char} /> : null;\r\n  return (\r\n    <div className='char__info'>\r\n      {skeleton}\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst View = ({ char }) => {\r\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\r\n  const comicsCutArr = comics.slice(0, 10);\r\n  const incorrectImage = thumbnail\r\n    .split('/')\r\n    .includes('image_not_available.jpg');\r\n  return (\r\n    <>\r\n      <div className='char__basics'>\r\n        <img\r\n          src={thumbnail}\r\n          alt={name}\r\n          style={incorrectImage ? { objectFit: 'fill' } : null}\r\n        />\r\n        <div>\r\n          <div className='char__info-name'>{name}</div>\r\n          <div className='char__btns'>\r\n            <a href={homepage} className='button button__main'>\r\n              <div className='inner'>homepage</div>\r\n            </a>\r\n            <a href={wiki} className='button button__secondary'>\r\n              <div className='inner'>Wiki</div>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='char__descr'>{description}</div>\r\n      <div className='char__comics'>Comics:</div>\r\n      <ul className='char__comics-list'>\r\n        {comicsCutArr.length\r\n          ? comicsCutArr.map((item, i) => {\r\n              const splitStr = item.resourceURI.split('/');\r\n              return (\r\n                <Link\r\n                  to={`/comics/${+splitStr[splitStr.length - 1]}`}\r\n                  className='char__comics-item'\r\n                  key={i}\r\n                >\r\n                  {item.name}\r\n                </Link>\r\n              );\r\n            })\r\n          : 'There is not comics'}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nCharInfo.propTypes = {\r\n  selectedChar: PropTypes.number,\r\n};\r\n\r\nexport default CharInfo;\r\n","import { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport useMarvelServices from '../../services/MarvelService';\r\n\r\nimport '../../style/button.scss';\r\nimport './formChar.scss';\r\n\r\nconst FormChar = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { getCharacterByName, clearError } = useMarvelServices();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name).then(onCharLoaded);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"char__form\">\r\n        <h2>Or find a character by name:</h2>\r\n        <Formik\r\n          initialValues={{ name: '' }}\r\n          validate={(values) => {\r\n            const errors = {};\r\n            if (!values.name) {\r\n              errors.name = 'This field is required';\r\n            }\r\n            return errors;\r\n          }}\r\n          onSubmit={(values, { setSubmitting }) => {\r\n            updateChar(values.name.toLowerCase());\r\n            setSubmitting(false);\r\n          }}\r\n        >\r\n          {({ isSubmitting }) => (\r\n            <Form>\r\n              <Field type=\"text\" name=\"name\" placeholder=\"Enter name\" />\r\n              <button\r\n                className=\"button button__main\"\r\n                type=\"submit\"\r\n                disabled={isSubmitting}\r\n              >\r\n                <div className=\"inner\">Find</div>\r\n              </button>\r\n              <ErrorMessage className=\"error\" name=\"name\" component=\"div\" />\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n        {char ? <View name={char.name} /> : null}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst View = ({ name }) => {\r\n  return (\r\n    <>\r\n      {name ? (\r\n        <div className=\"char__response\">\r\n          <p className=\"char__response-good\">{`There is! Visit ${name} page?`}</p>\r\n          <Link\r\n            to={`characters/${name.toLowerCase()}`}\r\n            className=\"button button__main\"\r\n          >\r\n            <div className=\"inner\">To Page</div>\r\n          </Link>\r\n        </div>\r\n      ) : (\r\n        <p className=\"char__response-bad\">\r\n          The character was not found. Check the name and try again\r\n        </p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormChar;\r\n","import React from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch = (error, errorInfo) => {\r\n    console.log(errorInfo.componentStack);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from 'react';\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport FormChar from '../formChar/FormChar';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setSelectedChar] = useState(null);\r\n\r\n  const updateIdChar = (idChar) => {\r\n    setSelectedChar((selectedChar) => (selectedChar = idChar));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList updateIdChar={updateIdChar} />\r\n        </ErrorBoundary>\r\n        <div className=\"char__content-right\">\r\n          <ErrorBoundary>\r\n            <CharInfo selectedChar={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <FormChar />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n"],"sourceRoot":""}